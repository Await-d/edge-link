name: Backend CI/CD

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: edgelink

jobs:
  # Linting and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: |
          cd backend
          golangci-lint run --timeout 5m

      - name: Check Go formatting
        run: |
          cd backend
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: |
          cd backend
          go vet ./...

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run tests with coverage
        run: |
          cd backend
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold
        run: |
          cd backend
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          echo "Required coverage: 80%"

          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Coverage ${COVERAGE}% is below threshold 80%"
            exit 1
          fi

          echo "✅ Coverage check passed: ${COVERAGE}%"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: edgelink
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: edgelink_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run database migrations
        run: |
          cd backend
          go run cmd/migrate/main.go up
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: edgelink
          DB_PASSWORD: test_password
          DB_NAME: edgelink_test

      - name: Run integration tests
        run: |
          cd backend
          go test -v -tags=integration ./...
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: edgelink
          DB_PASSWORD: test_password
          DB_NAME: edgelink_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - api-gateway
          - device-service
          - topology-service
          - nat-coordinator
          - alert-service
          - background-worker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Gosec security scanner
        run: |
          cd backend
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./...

      - name: Upload Gosec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: './backend/gosec-results.sarif'

  # Generate SBOM (Software Bill of Materials)
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - api-gateway
          - device-service
          - topology-service
          - nat-coordinator
          - alert-service
          - background-worker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image name
        id: image
        run: |
          echo "name=${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.image.outputs.name }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: Generate SBOM in CycloneDX format
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.image.outputs.name }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.service }}.cdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: |
            sbom-${{ matrix.service }}.spdx.json
            sbom-${{ matrix.service }}.cdx.json
          retention-days: 90

      - name: Scan SBOM for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          sbom: sbom-${{ matrix.service }}.spdx.json
          fail-build: false
          severity-cutoff: high


  # Performance Benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: edgelink
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: edgelink_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build API Gateway
        run: |
          cd backend
          go build -o api-gateway ./cmd/api-gateway

      - name: Start API Gateway
        run: |
          cd backend
          ./api-gateway &
          echo $! > api-gateway.pid
          sleep 5
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: edgelink
          DB_PASSWORD: test_password
          DB_NAME: edgelink_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 8080

      - name: Wait for API to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 1; done'

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.48.0/k6-v0.48.0-linux-amd64.tar.gz | tar xz
          sudo mv k6-v0.48.0-linux-amd64/k6 /usr/local/bin/

      - name: Run performance tests
        run: |
          k6 run scripts/performance-test.js \
            --out json=performance-results.json \
            --summary-export=performance-summary.json
        env:
          BASE_URL: http://localhost:8080

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            performance-results.json
            performance-summary.json
          retention-days: 30

      - name: Check performance thresholds
        run: |
          # Fail if performance degrades
          P95=$(jq '.metrics.http_req_duration.values."p(95)"' performance-summary.json)
          ERROR_RATE=$(jq '.metrics.http_req_failed.values.rate' performance-summary.json)
          
          echo "P95 Latency: ${P95}ms"
          echo "Error Rate: ${ERROR_RATE}"
          
          if (( $(echo "$P95 > 200" | bc -l) )); then
            echo "❌ Performance threshold exceeded: P95 latency ${P95}ms > 200ms"
            exit 1
          fi
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "❌ Error rate threshold exceeded: ${ERROR_RATE} > 0.01"
            exit 1
          fi
          
          echo "✅ Performance thresholds passed"

      - name: Cleanup
        if: always()
        run: |
          if [ -f backend/api-gateway.pid ]; then
            kill $(cat backend/api-gateway.pid) || true
          fi


  # Deploy to staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-api.edgelink.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Deploy with Helm
        run: |
          helm upgrade --install edge-link-staging \
            infrastructure/helm/edge-link-control-plane \
            --namespace edgelink-staging \
            --create-namespace \
            --set global.imageTag=${{ github.sha }} \
            --set ingress.hosts[0].host=staging-api.edgelink.example.com \
            --values infrastructure/helm/values-staging.yaml \
            --wait \
            --timeout 10m

      - name: Run smoke tests
        run: |
          ./scripts/smoke-test.sh staging-api.edgelink.example.com

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build, security]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Backend CI/CD pipeline failed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
