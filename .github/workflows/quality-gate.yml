name: Quality Gate

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  # Quality thresholds
  BACKEND_COVERAGE_THRESHOLD: 80
  FRONTEND_COVERAGE_THRESHOLD: 70
  MAX_COMPLEXITY: 15
  MAX_FUNCTION_LENGTH: 50

jobs:
  # Backend code quality checks
  backend-quality:
    name: Backend Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run tests with coverage
        run: |
          cd backend
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold
        run: |
          cd backend
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          echo "Required coverage: ${BACKEND_COVERAGE_THRESHOLD}%"

          if (( $(echo "$COVERAGE < $BACKEND_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "::error::Coverage ${COVERAGE}% is below threshold ${BACKEND_COVERAGE_THRESHOLD}%"
            exit 1
          fi

          echo "✅ Coverage check passed: ${COVERAGE}%"
          echo "BACKEND_COVERAGE=${COVERAGE}" >> $GITHUB_ENV

      - name: Check cyclomatic complexity
        run: |
          cd backend
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

          # Find files with high complexity
          HIGH_COMPLEXITY=$(gocyclo -over $MAX_COMPLEXITY . || true)

          if [ -n "$HIGH_COMPLEXITY" ]; then
            echo "::warning::Functions with cyclomatic complexity > $MAX_COMPLEXITY:"
            echo "$HIGH_COMPLEXITY"
            # Don't fail for now, just warn
          else
            echo "✅ All functions have acceptable complexity"
          fi

      - name: Check code duplication
        run: |
          cd backend
          go install github.com/mibk/dupl@latest

          DUPLICATES=$(dupl -threshold 50 -t ./... || true)

          if [ -n "$DUPLICATES" ]; then
            echo "::warning::Code duplication detected:"
            echo "$DUPLICATES"
          else
            echo "✅ No significant code duplication found"
          fi

      - name: Run golangci-lint with quality rules
        run: |
          cd backend
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          golangci-lint run --timeout 5m \
            --enable=gocyclo,dupl,goconst,misspell,ineffassign,staticcheck,gosec \
            --out-format=colored-line-number,checkstyle:golangci-lint-report.xml

      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-lint-report
          path: backend/golangci-lint-report.xml
          retention-days: 30

      - name: Generate quality badge
        run: |
          echo "Backend Coverage: ${BACKEND_COVERAGE}%" > backend-quality.txt

      - name: Upload quality metrics
        uses: actions/upload-artifact@v4
        with:
          name: backend-quality-metrics
          path: |
            backend/coverage.out
            backend-quality.txt
          retention-days: 30

  # Frontend code quality checks
  frontend-quality:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Configure npm Registry
        run: |
          pnpm config set registry https://registry.npmmirror.com

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Run ESLint with quality rules
        run: |
          cd frontend
          pnpm lint --max-warnings 0 --format json --output-file eslint-report.json || true

      - name: Check ESLint results
        run: |
          cd frontend
          if [ -f eslint-report.json ]; then
            ERROR_COUNT=$(jq '[.[].errorCount] | add' eslint-report.json)
            WARNING_COUNT=$(jq '[.[].warningCount] | add' eslint-report.json)

            echo "ESLint Errors: $ERROR_COUNT"
            echo "ESLint Warnings: $WARNING_COUNT"

            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "::error::ESLint found $ERROR_COUNT errors"
              exit 1
            fi

            if [ "$WARNING_COUNT" -gt 10 ]; then
              echo "::warning::ESLint found $WARNING_COUNT warnings (max 10 allowed)"
            fi
          fi

      - name: Run Prettier check
        run: |
          cd frontend
          pnpm format:check

      - name: Run TypeScript type check
        run: |
          cd frontend
          pnpm type-check

      - name: Run tests with coverage
        run: |
          cd frontend
          pnpm test:coverage -- --json --outputFile=test-results.json

      - name: Check coverage threshold
        run: |
          cd frontend
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            echo "Current coverage: ${COVERAGE}%"
            echo "Required coverage: ${FRONTEND_COVERAGE_THRESHOLD}%"

            if (( $(echo "$COVERAGE < $FRONTEND_COVERAGE_THRESHOLD" | bc -l) )); then
              echo "::error::Coverage ${COVERAGE}% is below threshold ${FRONTEND_COVERAGE_THRESHOLD}%"
              exit 1
            fi

            echo "✅ Coverage check passed: ${COVERAGE}%"
            echo "FRONTEND_COVERAGE=${COVERAGE}" >> $GITHUB_ENV
          else
            echo "::warning::Coverage summary not found"
          fi

      - name: Check bundle size
        run: |
          cd frontend
          pnpm build

          # Check main bundle size
          BUNDLE_SIZE=$(du -sh dist/assets/*.js | sort -h | tail -1 | cut -f1)
          echo "Main bundle size: $BUNDLE_SIZE"

          # Warn if bundle is too large (> 500KB)
          BUNDLE_BYTES=$(du -b dist/assets/*.js | sort -n | tail -1 | cut -f1)
          if [ "$BUNDLE_BYTES" -gt 512000 ]; then
            echo "::warning::Main bundle size exceeds 500KB: $BUNDLE_SIZE"
          fi

      - name: Run complexity analysis
        run: |
          cd frontend
          npx eslint-plugin-complexity-report src/ --ext .ts,.tsx || true

      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-lint-report
          path: frontend/eslint-report.json
          retention-days: 30

      - name: Upload quality metrics
        uses: actions/upload-artifact@v4
        with:
          name: frontend-quality-metrics
          path: |
            frontend/coverage/
            frontend/test-results.json
          retention-days: 30

  # SonarQube/SonarCloud analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    needs: [backend-quality, frontend-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-quality-metrics
          path: backend/

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-quality-metrics
          path: frontend/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=edgelink
            -Dsonar.projectKey=edgelink_edge-link
            -Dsonar.sources=backend,frontend/src
            -Dsonar.go.coverage.reportPaths=backend/coverage.out
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*_test.go,**/test/**,**/*.test.ts,**/*.test.tsx

  # Quality gate summary
  quality-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    if: always()
    steps:
      - name: Download all quality reports
        uses: actions/download-artifact@v4

      - name: Generate quality summary
        run: |
          cat > quality-summary.md << 'EOF'
          # Quality Gate Summary

          ## Overall Status
          - Backend Quality: ${{ needs.backend-quality.result }}
          - Frontend Quality: ${{ needs.frontend-quality.result }}

          ## Coverage
          - Backend: ${{ needs.backend-quality.outputs.coverage || 'N/A' }}%
          - Frontend: ${{ needs.frontend-quality.outputs.coverage || 'N/A' }}%

          ## Standards
          - Backend Coverage Threshold: ≥ ${BACKEND_COVERAGE_THRESHOLD}%
          - Frontend Coverage Threshold: ≥ ${FRONTEND_COVERAGE_THRESHOLD}%
          - Max Cyclomatic Complexity: ${MAX_COMPLEXITY}
          - Max Function Length: ${MAX_FUNCTION_LENGTH}

          ## Quality Checks
          - ✅ Linting enforced
          - ✅ Type checking enforced
          - ✅ Code formatting enforced
          - ✅ Test coverage enforced
          - ✅ Complexity analysis performed

          EOF

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('quality-summary.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Quality Gate Summary')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

      - name: Upload quality summary
        uses: actions/upload-artifact@v4
        with:
          name: quality-summary
          path: quality-summary.md
          retention-days: 90

  # Enforce quality gate
  enforce-quality-gate:
    name: Enforce Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    if: always()
    steps:
      - name: Check quality gate status
        run: |
          if [ "${{ needs.backend-quality.result }}" != "success" ] || [ "${{ needs.frontend-quality.result }}" != "success" ]; then
            echo "::error::Quality gate failed. Please fix the issues before merging."
            exit 1
          fi

          echo "✅ Quality gate passed!"

      - name: Post status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.backend-quality.result }}' === 'success' &&
                          '${{ needs.frontend-quality.result }}' === 'success'
                          ? 'success' : 'failure';

            console.log('Quality Gate Status:', status);
