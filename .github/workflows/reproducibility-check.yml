name: Reproducibility Check

on:
  # Run weekly on Sunday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to check (comma-separated or "all")'
        required: false
        default: 'all'
      verbose:
        description: 'Verbose output'
        type: boolean
        required: false
        default: false

  # Run on PR to main (optional, can be disabled if too slow)
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'infrastructure/docker/**'
      - '.github/workflows/reproducibility-check.yml'

jobs:
  # Job 1: Quick check for PRs
  quick-check:
    name: Quick Reproducibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run quick reproducibility check
        run: |
          ./scripts/quick-reproducibility-check.sh --verbose
        continue-on-error: true
        id: quick-check

      - name: Comment on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const outcome = '${{ steps.quick-check.outcome }}';
            const emoji = outcome === 'success' ? '✅' : '⚠️';
            const status = outcome === 'success' ? 'passed' : 'failed';

            const comment = `## ${emoji} Reproducibility Check ${status}\n\n` +
              `Quick check of critical services completed.\n\n` +
              `**Status:** ${status}\n` +
              `**Trigger:** PR to main\n\n` +
              (outcome !== 'success' ?
                '⚠️ Some services may not be reproducible. Check the workflow logs for details.\n\n' +
                'Run `./scripts/verify-reproducibility.sh --all --report` locally for detailed analysis.'
                : '✅ All critical services passed the reproducibility check.');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 2: Full reproducibility verification
  full-verification:
    name: Full Reproducibility Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        service:
          - api-gateway
          - alert-service
          - background-worker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq binutils

      - name: Run reproducibility test for ${{ matrix.service }}
        id: repro-test
        run: |
          ./scripts/verify-reproducibility.sh \
            --service ${{ matrix.service }} \
            --report
        continue-on-error: true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: reproducibility-artifacts-${{ matrix.service }}
          path: |
            /tmp/reproducibility-test-*/
            reproducibility-report.txt
          retention-days: 7

      - name: Check test result
        if: steps.repro-test.outcome != 'success'
        run: |
          echo "::warning::Service ${{ matrix.service }} failed reproducibility test"
          exit 1

  # Job 3: Build environment verification
  environment-check:
    name: Build Environment Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify build environment
        id: env-check
        run: |
          ./scripts/verify-build-environment.sh --verbose
        continue-on-error: true

      - name: Upload environment fingerprint
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-environment-fingerprint
          path: .build-environment-fingerprint
          retention-days: 30

      - name: Check environment result
        if: steps.env-check.outcome != 'success'
        run: |
          echo "::warning::Build environment has issues that may affect reproducibility"

  # Job 4: Generate summary report
  summary:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs: [full-verification, environment-check]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary
        run: |
          echo "# Reproducibility Check Summary" > summary.md
          echo "" >> summary.md
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> summary.md
          echo "**Workflow:** ${{ github.workflow }}" >> summary.md
          echo "**Run ID:** ${{ github.run_id }}" >> summary.md
          echo "" >> summary.md

          echo "## Test Results" >> summary.md
          echo "" >> summary.md

          # Check for reproducibility reports
          if ls reproducibility-artifacts-*/reproducibility-report.txt 1> /dev/null 2>&1; then
            for report in reproducibility-artifacts-*/reproducibility-report.txt; do
              echo "### $(dirname $report)" >> summary.md
              echo '```' >> summary.md
              cat "$report" >> summary.md
              echo '```' >> summary.md
              echo "" >> summary.md
            done
          else
            echo "No reproducibility reports found" >> summary.md
          fi

          echo "" >> summary.md
          echo "## Build Environment" >> summary.md
          echo "" >> summary.md

          if [ -f build-environment-fingerprint/.build-environment-fingerprint ]; then
            echo '```' >> summary.md
            cat build-environment-fingerprint/.build-environment-fingerprint >> summary.md
            echo '```' >> summary.md
          else
            echo "No environment fingerprint found" >> summary.md
          fi

          cat summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: reproducibility-summary
          path: summary.md
          retention-days: 90

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = 'Failed to generate summary';
            try {
              summary = fs.readFileSync('summary.md', 'utf8');
            } catch (e) {
              // Use default message
            }

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔴 Reproducibility Check Failed',
              body: `## Reproducibility Check Failure\n\n` +
                    `One or more services failed the reproducibility check.\n\n` +
                    `**Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n` +
                    `### Details\n\n${summary}\n\n` +
                    `### Action Required\n\n` +
                    `1. Review the workflow logs\n` +
                    `2. Run \`./scripts/verify-reproducibility.sh --all --report\` locally\n` +
                    `3. Check for non-deterministic build factors\n` +
                    `4. Update Dockerfiles or build scripts as needed`,
              labels: ['build', 'reproducibility', 'automated']
            });

  # Job 5: Track build hashes (only on schedule)
  track-hashes:
    name: Track Build Hashes
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [full-verification]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build services
        run: |
          for service in api-gateway alert-service background-worker; do
            ./scripts/build-reproducible.sh \
              --service $service \
              --record-hash
          done

      - name: Commit hash database
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if [ -f .build-hashes.json ]; then
            git add .build-hashes.json
            git commit -m "chore: Update build hashes [skip ci]" || echo "No changes to commit"
            git push || echo "Nothing to push"
          fi
