name: Validate Commits

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
      - 'release/**'

env:
  GO_VERSION: '1.21'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-commit-messages:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for commit validation

      - name: Get PR commits
        id: get-commits
        run: |
          # Get all commits in this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"

          # Get commit list
          COMMITS=$(git log --pretty=format:"%H|%s" ${BASE_SHA}..${HEAD_SHA})

          if [[ -z "$COMMITS" ]]; then
            echo "No commits found in PR"
            exit 0
          fi

          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate each commit message
        if: steps.get-commits.outputs.commits != ''
        run: |
          # Color codes
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'

          ERRORS=0
          TOTAL=0

          echo "========================================="
          echo "Validating Commit Messages"
          echo "========================================="
          echo ""

          while IFS='|' read -r commit_hash commit_msg; do
            ((TOTAL++))

            # Skip empty lines
            [[ -z "$commit_hash" ]] && continue

            echo "Commit: ${commit_hash:0:7}"
            echo "Message: $commit_msg"
            echo ""

            # Create temp file with commit message
            TEMP_FILE=$(mktemp)
            echo "$commit_msg" > "$TEMP_FILE"

            # Run validation script
            if ./scripts/validate-commit-msg.sh "$TEMP_FILE"; then
              echo -e "${GREEN}‚úì Valid${NC}"
            else
              echo -e "${RED}‚úó Invalid${NC}"
              ((ERRORS++))
            fi

            rm -f "$TEMP_FILE"
            echo "========================================="
            echo ""

          done <<< "${{ steps.get-commits.outputs.commits }}"

          echo ""
          echo "Summary: Validated $TOTAL commits, found $ERRORS errors"

          if [[ $ERRORS -gt 0 ]]; then
            echo ""
            echo -e "${RED}‚ùå Commit message validation failed!${NC}"
            echo ""
            echo "Please fix invalid commit messages to follow Conventional Commits:"
            echo "  Format: <type>(<scope>): <subject>"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
            echo ""
            echo "Examples:"
            echo "  ‚úì feat(api): add user authentication"
            echo "  ‚úì fix(ui): resolve button alignment"
            echo "  ‚úì docs: update README"
            echo ""
            echo "See: https://www.conventionalcommits.org/"
            exit 1
          fi

          echo -e "${GREEN}‚úÖ All commit messages are valid!${NC}"

      - name: Comment on PR (on failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ‚ùå Commit Message Validation Failed

            Some commit messages in this PR do not follow the [Conventional Commits](https://www.conventionalcommits.org/) specification.

            ### Required Format
            \`\`\`
            <type>(<scope>): <subject>
            \`\`\`

            ### Valid Types
            - **feat**: New feature
            - **fix**: Bug fix
            - **docs**: Documentation changes
            - **style**: Code style changes (formatting, etc.)
            - **refactor**: Code refactoring
            - **perf**: Performance improvements
            - **test**: Test changes
            - **build**: Build system changes
            - **ci**: CI/CD changes
            - **chore**: Maintenance tasks
            - **revert**: Revert previous commit

            ### Examples
            - ‚úÖ \`feat(api): add user authentication endpoint\`
            - ‚úÖ \`fix(ui): resolve button alignment issue\`
            - ‚úÖ \`docs: update installation guide\`
            - ‚úÖ \`perf(database): optimize query performance\`
            - ‚ùå \`Add new feature\` (missing type)
            - ‚ùå \`FIX(api): bug fix\` (type must be lowercase)

            ### How to Fix

            **Option 1: Interactive Rebase (Recommended)**
            \`\`\`bash
            git rebase -i HEAD~N  # N = number of commits to fix
            # Change 'pick' to 'reword' for commits to fix
            # Save and follow prompts to edit commit messages
            git push --force-with-lease
            \`\`\`

            **Option 2: Amend Last Commit**
            \`\`\`bash
            git commit --amend -m "feat(scope): new commit message"
            git push --force-with-lease
            \`\`\`

            Please fix the invalid commit messages and push the changes.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Comment on PR (on success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ‚úÖ Commit Message Validation Passed

            All commit messages in this PR follow the [Conventional Commits](https://www.conventionalcommits.org/) specification. Great work! üéâ`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"

          echo "PR Title: $PR_TITLE"
          echo ""

          # Create temp file with PR title
          TEMP_FILE=$(mktemp)
          echo "$PR_TITLE" > "$TEMP_FILE"

          # Validate PR title using same validation script
          if ./scripts/validate-commit-msg.sh "$TEMP_FILE"; then
            echo "‚úÖ PR title is valid"
            rm -f "$TEMP_FILE"
            exit 0
          else
            echo ""
            echo "‚ùå PR title validation failed"
            echo ""
            echo "PR titles should also follow Conventional Commits format:"
            echo "  Format: <type>(<scope>): <subject>"
            echo ""
            echo "Examples:"
            echo "  ‚úì feat(api): add user authentication"
            echo "  ‚úì fix(ui): resolve button alignment"
            echo "  ‚úì docs: update README"
            echo ""
            rm -f "$TEMP_FILE"
            exit 1
          fi

      - name: Comment on PR (title invalid)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ‚ö†Ô∏è PR Title Format Issue

            The PR title should follow the [Conventional Commits](https://www.conventionalcommits.org/) format:

            \`\`\`
            <type>(<scope>): <subject>
            \`\`\`

            **Current title:** \`${{ github.event.pull_request.title }}\`

            Please update the PR title to match the format. This helps with automated changelog generation.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
