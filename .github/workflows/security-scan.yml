name: Security Scanning

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'

jobs:
  # Dependency vulnerability scanning with Snyk
  snyk-scan:
    name: Snyk Dependency Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for backend vulnerabilities
        uses: snyk/actions/golang@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk-backend.sarif
          command: test
          working-directory: backend

      - name: Upload Snyk backend results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-backend.sarif
          category: snyk-backend

      - name: Set up Node.js for frontend scanning
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Snyk to check for frontend vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk-frontend.sarif
          command: test
          working-directory: frontend

      - name: Upload Snyk frontend results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-frontend.sarif
          category: snyk-frontend

  # Dependabot-style dependency updates
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  # SAST scanning with CodeQL
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['go', 'javascript']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Container image vulnerability scanning
  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - api-gateway
          - alert-service
          - background-worker
          - frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.${{ matrix.service }}
          tags: edgelink/${{ matrix.service }}:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: edgelink/${{ matrix.service }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: trivy-${{ matrix.service }}

      - name: Generate vulnerability report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: edgelink/${{ matrix.service }}:scan
          format: 'json'
          output: 'trivy-${{ matrix.service }}-report.json'

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ matrix.service }}
          path: trivy-${{ matrix.service }}-report.json
          retention-days: 30

  # Secret scanning with Gitleaks
  gitleaks:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # License compliance check
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check backend licenses
        run: |
          cd backend
          go-licenses check ./... \
            --disallowed_types=forbidden,restricted \
            --allowed_licenses=MIT,Apache-2.0,BSD-3-Clause,BSD-2-Clause,ISC

      - name: Save backend license report
        run: |
          cd backend
          go-licenses save ./... --save_path=../licenses/backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check frontend licenses
        run: |
          cd frontend
          license-checker --production --failOn "GPL;AGPL"

      - name: Generate frontend license report
        run: |
          cd frontend
          license-checker --production --json > ../licenses/frontend-licenses.json

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: licenses/
          retention-days: 90

  # Security policy compliance check
  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for SECURITY.md
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "::warning::SECURITY.md not found"
          fi

      - name: Check for security headers in Dockerfile
        run: |
          for dockerfile in infrastructure/docker/Dockerfile.*; do
            if ! grep -q "USER" "$dockerfile"; then
              echo "::warning::$dockerfile does not specify a non-root USER"
            fi
          done

      - name: Check for security best practices
        run: |
          # Check for hardcoded secrets (basic check)
          if git grep -iE "(password|secret|api_key|token)\s*=\s*['\"][^'\"]+['\"]" -- ':!.github/workflows/*' ':!*.md'; then
            echo "::error::Possible hardcoded secrets found"
            exit 1
          fi

  # Aggregate security results
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [snyk-scan, trivy-scan, gitleaks, license-scan]
    if: always()
    steps:
      - name: Download all scan reports
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "- Snyk Dependency Scan: ${{ needs.snyk-scan.result }}" >> security-summary.md
          echo "- Trivy Container Scan: ${{ needs.trivy-scan.result }}" >> security-summary.md
          echo "- Gitleaks Secret Scan: ${{ needs.gitleaks.result }}" >> security-summary.md
          echo "- License Compliance: ${{ needs.license-scan.result }}" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Notify on critical vulnerabilities
  notify-security:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [snyk-scan, trivy-scan, gitleaks]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'ðŸš¨ Critical security vulnerabilities detected in Edge-Link'
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security Scan Failed - ' + new Date().toISOString().split('T')[0],
              body: 'Security vulnerabilities detected. Check the [workflow run](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ') for details.',
              labels: ['security', 'high-priority']
            });
