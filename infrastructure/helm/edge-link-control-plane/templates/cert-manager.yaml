{{- if .Values.certManager.enabled }}
---
# Certificate Issuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: {{ include "edge-link.fullname" . }}-letsencrypt-prod
  labels:
    {{- include "edge-link.labels" . | nindent 4 }}
spec:
  acme:
    # Let's Encrypt 生产环境服务器
    server: https://acme-v02.api.letsencrypt.org/directory

    # 用于接收证书过期通知的邮箱
    email: {{ .Values.certManager.email | required "certManager.email is required" }}

    # 用于存储 ACME 账户私钥的 Secret 名称
    privateKeySecretRef:
      name: {{ include "edge-link.fullname" . }}-letsencrypt-prod-key

    # ACME 挑战解析器
    solvers:
    {{- if .Values.certManager.solvers.http01.enabled }}
    # HTTP-01 挑战（适用于大多数情况）
    - http01:
        ingress:
          class: {{ .Values.certManager.solvers.http01.ingressClass | default "nginx" }}
          {{- with .Values.certManager.solvers.http01.serviceType }}
          serviceType: {{ . }}
          {{- end }}
    {{- end }}

    {{- if .Values.certManager.solvers.dns01.enabled }}
    # DNS-01 挑战（适用于通配符证书）
    - dns01:
        {{- if eq .Values.certManager.solvers.dns01.provider "cloudflare" }}
        cloudflare:
          email: {{ .Values.certManager.solvers.dns01.cloudflare.email }}
          apiTokenSecretRef:
            name: {{ .Values.certManager.solvers.dns01.cloudflare.apiTokenSecretName }}
            key: api-token
        {{- else if eq .Values.certManager.solvers.dns01.provider "route53" }}
        route53:
          region: {{ .Values.certManager.solvers.dns01.route53.region }}
          {{- if .Values.certManager.solvers.dns01.route53.role }}
          role: {{ .Values.certManager.solvers.dns01.route53.role }}
          {{- end }}
          {{- if .Values.certManager.solvers.dns01.route53.accessKeyID }}
          accessKeyID: {{ .Values.certManager.solvers.dns01.route53.accessKeyID }}
          secretAccessKeySecretRef:
            name: {{ .Values.certManager.solvers.dns01.route53.secretName }}
            key: secret-access-key
          {{- end }}
        {{- else if eq .Values.certManager.solvers.dns01.provider "google" }}
        cloudDNS:
          project: {{ .Values.certManager.solvers.dns01.google.project }}
          serviceAccountSecretRef:
            name: {{ .Values.certManager.solvers.dns01.google.serviceAccountSecretName }}
            key: key.json
        {{- end }}
    {{- end }}

---
# Certificate Issuer for Let's Encrypt Staging (用于测试)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: {{ include "edge-link.fullname" . }}-letsencrypt-staging
  labels:
    {{- include "edge-link.labels" . | nindent 4 }}
spec:
  acme:
    # Let's Encrypt 测试环境服务器（速率限制宽松）
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: {{ .Values.certManager.email }}
    privateKeySecretRef:
      name: {{ include "edge-link.fullname" . }}-letsencrypt-staging-key
    solvers:
    {{- if .Values.certManager.solvers.http01.enabled }}
    - http01:
        ingress:
          class: {{ .Values.certManager.solvers.http01.ingressClass | default "nginx" }}
    {{- end }}
    {{- if .Values.certManager.solvers.dns01.enabled }}
    - dns01:
        {{- if eq .Values.certManager.solvers.dns01.provider "cloudflare" }}
        cloudflare:
          email: {{ .Values.certManager.solvers.dns01.cloudflare.email }}
          apiTokenSecretRef:
            name: {{ .Values.certManager.solvers.dns01.cloudflare.apiTokenSecretName }}
            key: api-token
        {{- else if eq .Values.certManager.solvers.dns01.provider "route53" }}
        route53:
          region: {{ .Values.certManager.solvers.dns01.route53.region }}
          {{- if .Values.certManager.solvers.dns01.route53.accessKeyID }}
          accessKeyID: {{ .Values.certManager.solvers.dns01.route53.accessKeyID }}
          secretAccessKeySecretRef:
            name: {{ .Values.certManager.solvers.dns01.route53.secretName }}
            key: secret-access-key
          {{- end }}
        {{- end }}
    {{- end }}

{{- if .Values.certManager.selfSigned.enabled }}
---
# Self-Signed Certificate Issuer (用于开发/测试)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: {{ include "edge-link.fullname" . }}-selfsigned
  labels:
    {{- include "edge-link.labels" . | nindent 4 }}
spec:
  selfSigned: {}
{{- end }}

---
# Certificate for API Gateway
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ include "edge-link.fullname" . }}-api-tls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edge-link.labels" . | nindent 4 }}
spec:
  # 证书的 DNS 名称
  dnsNames:
  {{- range .Values.ingress.hosts }}
  - {{ .host | quote }}
  {{- end }}
  {{- if .Values.certManager.additionalDnsNames }}
  {{- range .Values.certManager.additionalDnsNames }}
  - {{ . | quote }}
  {{- end }}
  {{- end }}

  # 证书存储的 Secret 名称
  secretName: {{ include "edge-link.fullname" . }}-tls

  # 使用的 Issuer
  issuerRef:
    name: {{ include "edge-link.fullname" . }}-{{ .Values.certManager.issuer }}
    kind: ClusterIssuer
    group: cert-manager.io

  # 证书有效期
  duration: {{ .Values.certManager.duration | default "2160h" }}  # 90天

  # 证书续期时间（在过期前多久开始续期）
  renewBefore: {{ .Values.certManager.renewBefore | default "360h" }}  # 15天

  # 私钥配置
  privateKey:
    algorithm: {{ .Values.certManager.privateKey.algorithm | default "RSA" }}
    size: {{ .Values.certManager.privateKey.size | default 2048 }}
    rotationPolicy: {{ .Values.certManager.privateKey.rotationPolicy | default "Always" }}

  # 用途
  usages:
  - digital signature
  - key encipherment
  - server auth

{{- if .Values.certManager.wildcardCertificate.enabled }}
---
# Wildcard Certificate (需要 DNS-01 挑战)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ include "edge-link.fullname" . }}-wildcard-tls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edge-link.labels" . | nindent 4 }}
spec:
  dnsNames:
  - "*.{{ .Values.certManager.wildcardCertificate.domain }}"
  - "{{ .Values.certManager.wildcardCertificate.domain }}"

  secretName: {{ include "edge-link.fullname" . }}-wildcard-tls

  issuerRef:
    name: {{ include "edge-link.fullname" . }}-{{ .Values.certManager.issuer }}
    kind: ClusterIssuer
    group: cert-manager.io

  duration: {{ .Values.certManager.duration | default "2160h" }}
  renewBefore: {{ .Values.certManager.renewBefore | default "360h" }}

  privateKey:
    algorithm: {{ .Values.certManager.privateKey.algorithm | default "RSA" }}
    size: {{ .Values.certManager.privateKey.size | default 2048 }}
{{- end }}

---
# Certificate Renewal CronJob
# 定期检查并触发证书续期（cert-manager会自动续期，这是额外的监控）
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "edge-link.fullname" . }}-cert-renewal-check
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "edge-link.labels" . | nindent 4 }}
spec:
  # 每天凌晨2点检查
  schedule: "0 2 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "edge-link.selectorLabels" . | nindent 12 }}
            component: cert-renewal-check
        spec:
          serviceAccountName: {{ include "edge-link.serviceAccountName" . }}
          restartPolicy: OnFailure
          containers:
          - name: cert-check
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            command:
            - /bin/bash
            - -c
            - |
              echo "Checking certificate status..."
              kubectl get certificate -n {{ .Release.Namespace }}
              kubectl describe certificate {{ include "edge-link.fullname" . }}-api-tls -n {{ .Release.Namespace }}

              # 检查证书是否即将过期（15天内）
              EXPIRY=$(kubectl get certificate {{ include "edge-link.fullname" . }}-api-tls -n {{ .Release.Namespace }} -o jsonpath='{.status.notAfter}')
              echo "Certificate expires at: $EXPIRY"

              # 检查证书状态
              READY=$(kubectl get certificate {{ include "edge-link.fullname" . }}-api-tls -n {{ .Release.Namespace }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
              if [ "$READY" != "True" ]; then
                echo "WARNING: Certificate is not ready!"
                exit 1
              fi

              echo "Certificate check completed successfully"

{{- end }}
